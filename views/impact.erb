<% @impact.each do |result| %>
[<%= result[:name] %>](<%= result[:fileuri] %>) is a _<%= result[:kind] %>_
----------------------------------

<% if result[:exact].empty? and result[:near].empty? %>
that may have no external impact to Forge modules.
<% end %>

<% unless result[:exact].empty? %>
<details>
  <summary>Breaking changes to this file WILL impact these <%= result[:exact].count %> modules (exact match):</summary>

<% result[:exact].each do |row| %>
* [<%= row[:module] %>](<%= row[:repo] %>)
<% end %>
</details>
<% end %>

<% unless result[:near].empty? %>
<details>
  <summary>Breaking changes to this file MAY impact these <%= result[:near].count %> modules (near match):</summary>

<% result[:near].each do |row| %>
* [<%= row[:module] %>](<%= row[:repo] %>)
<% end %>
</details>
<% end %>

<% end %>

<% unless @puppetfiles.nil? %>
#### This module is declared in <%= @puppetfiles %> indexed public `Puppetfiles`.
<% end %>

---------------------------------

These results were generated with [Rangefinder](https://github.com/puppetlabs/puppet-community-rangefinder), a tool that helps predict the downstream impact of breaking changes to elements used in Puppet modules. You can run this on the command line to get a full report.

Exact matches are those that we can positively identify via namespace and the declaring modules' metadata. Non-namespaced items, such as Puppet 3.x functions, will always be reported as near matches only.
